// ------------  Paquete e importaciones ------------
package analizadorDF;

import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.LinkedList;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funcionalidad.Funcion.addErroresLista("Sintactico",(String) s.value, s.right, s.left );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
           System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           funcionalidad.Funcion.addErroresLista( "Sintactico",(String) s.value, s.right, s.left );
           JOptionPane.showMessageDialog(null, "Error sintactico: No se pudo recuperar. Por favor corregir el error", (String) s.value, JOptionPane.ERROR_MESSAGE);
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String IGUAL;
terminal String PUNTOYCOMA;
terminal String PARENTESIS_A;
terminal String PARENTESIS_C;
terminal String MAYOR;
terminal String MENOR;
terminal String PUNTO;
terminal String DOSPUNTOS;
terminal String ADMIRACION;
terminal String COMA;
terminal String CORCHETE_A;
terminal String CORCHETE_C;
terminal String GUION_MEDIO;
terminal String ARROBA;

terminal String R_PROGRAM; 
terminal String R_END; 
terminal String R_CHAR;  
terminal String R_VAR;  
terminal String R_DOUBLE;  
terminal String R_ARR; 
terminal String R_SUM;  
terminal String R_RES;  
terminal String R_MUL;  
terminal String R_DIV;  
terminal String R_MOD; 
terminal String R_MEDIA;  
terminal String R_MEDIANA; 
terminal String R_MODA; 
terminal String R_VARIANZA;  
terminal String R_MAX; 
terminal String R_MIN;
terminal String R_CONSOLE;  
terminal String R_PRINT;  
terminal String R_COLUMN; 
terminal String R_EXEC; 
terminal String R_VALUES; 
terminal String R_TITULO; 
terminal String R_LABEL; 
terminal String R_EJEX; 
terminal String R_EJEY; 
terminal String R_TITULOX; 
terminal String R_TITULOY; 
terminal String R_HISTOGRAM; 
terminal String R_GLINE;
terminal String R_GPIE;
terminal String R_GBAR;
 

terminal String ENTERO; 
terminal String CADENA;   
terminal String DECIMALES; 
terminal String ID; 

//------> Declaración de no terminales
non terminal inicio;
non terminal codigo;
non terminal instruccion;
non terminal declaracion;
non terminal numero;
non terminal cadena;
non terminal arreglos;
non terminal valoresnumeros;
non terminal valorescadenas;
non terminal listanum;
non terminal operaciones;
non terminal funcionesop;
//non terminal parametrosop;
non terminal impresiones;
non terminal imprimirexpresiones;
non terminal imprimirarreglos;
non terminal listaexpresiones;
non terminal expresiones;
non terminal funcionesest;
non terminal arreglodouble;

//------> PRECEDENCIA
//precedence left MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, IGUAL_IGUAL, DISTINTO;
//precedence left OR, AND;
//precedence left NOT;
//precedence left SUMA;
//precedence left RESTA;
//precedence left MULTIPLICACION;
//precedence left DIVISION;
//precedence left RESTA;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------
//{:  func.Traduccion.traducciones = tod; :}
inicio ::= R_PROGRAM codigo:tod R_END R_PROGRAM                                     //     {: LinkedList<String> ls20 = new LinkedList<>(); ls20.add("def main():"); func.Traduccion.cn++; ls20.addAll(func.Traduccion.addTabula(tod)); func.Traduccion.cn--; ls20.add("if__name__ = \"__main__\":\n\tmain()"); func.Traduccion.traducciones = ls20; :}
;
codigo ::= codigo:tod instruccion:sol                                               // {: tod.addAll((LinkedList) sol); RESULT = (LinkedList) tod; :} 
        | instruccion:sol                                                           // {: LinkedList<String> tod = new LinkedList<>(); tod.addAll((LinkedList) sol); RESULT = (LinkedList) tod; :} 
;
instruccion ::= declaracion
                | arreglos
                | operaciones
                | impresiones
;
declaracion ::= R_VAR:pos1 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID:nomvariable MENOR GUION_MEDIO numero:valorrecibido R_END PUNTOYCOMA                       {: System.out.println(nomvariable+" " +String.valueOf(valorrecibido));funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable, String.valueOf(valorrecibido), "variable double", pos1right,  pos1left); :}
              | R_VAR:pos2 DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ID:nomvariable1 MENOR GUION_MEDIO cadena:datorecibido R_END PUNTOYCOMA   {: funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable1, String.valueOf(datorecibido), "variable string", pos2right,  pos2left); :}
;
numero ::= DECIMALES:v1                                                         {: RESULT = v1; :} 
        | ENTERO:v2                                                             {: RESULT = v2; :}
        | ID:v3                                                                 {: RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v3); :}
;
cadena ::= CADENA:v4                                                            {: RESULT = v4; :} 
        | ID:v5                                                                 {: RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v5); :} 
;
arreglos ::= R_ARR:pos3 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable2 MENOR GUION_MEDIO CORCHETE_A valoresnumeros:valorrecibido1 CORCHETE_C R_END PUNTOYCOMA                        {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable2),(LinkedList) valorrecibido1, "arreglo double", pos3right,  pos3left); funcionalidad.Funcion.imprimirValordIdA("decArreglos", "@"+ String.valueOf(nombrevariable2)); funcionalidad.Funcion.limpiarTemporalA();:}
        | R_ARR:pos4 DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable3 MENOR GUION_MEDIO CORCHETE_A valorescadenas:datorecibido1 CORCHETE_C R_END PUNTOYCOMA        {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable3),(LinkedList) datorecibido1, "arreglo string", pos4right,  pos4left); :}
        | R_ARR:pos5 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable4 MENOR GUION_MEDIO ARROBA ID:v6 R_END PUNTOYCOMA                                                                  {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable4),(LinkedList) funcionalidad.Funcion.buscarValordIdA("decArreglos", "@"+ String.valueOf(v6) ), "arreglo double", pos5right,  pos5left); :}
        | R_ARR:pos6 DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable5 MENOR GUION_MEDIO ARROBA ID:v7 R_END PUNTOYCOMA                                              {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable5),(LinkedList) funcionalidad.Funcion.buscarValordIdA("decArreglos", "@"+ String.valueOf(v7) ), "arreglo string", pos6right,  pos6left); :}
;
valoresnumeros ::= listanum:sol                                                 {: funcionalidad.Funcion.agregarTemporalA(Double.parseDouble((String)sol)); RESULT = (LinkedList) funcionalidad.Funcion.obtenerTemporalA(); :}
                | listanum:sol1 COMA valoresnumeros                             {: funcionalidad.Funcion.agregarTemporalA(Double.parseDouble((String)sol1)); RESULT = (LinkedList) funcionalidad.Funcion.obtenerTemporalA(); :} 
;
listanum ::= funcionesop:resultfunop                                            {: RESULT = resultfunop; :}                                            
            | funcionesest:resultfunest                                         {: RESULT = resultfunest ; :} 
            | DECIMALES:v8                                                      {: RESULT = v8; :} 
            | ENTERO:v9                                                         {: RESULT = v9; :} 
            | ID:v10                                                            {: RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v10); :} 
;
valorescadenas ::= cadena
            | cadena COMA valorescadenas
;
operaciones ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesop R_END PUNTOYCOMA
            | R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesest R_END PUNTOYCOMA
;
funcionesop ::= R_SUM PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            | R_RES PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            | R_MUL PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            | R_DIV PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            | R_MOD PARENTESIS_A listanum COMA listanum PARENTESIS_C 
;
funcionesest ::= R_MEDIA PARENTESIS_A arreglodouble PARENTESIS_C
                | R_MEDIANA PARENTESIS_A arreglodouble PARENTESIS_C
                | R_MODA PARENTESIS_A arreglodouble PARENTESIS_C
                | R_VARIANZA PARENTESIS_A arreglodouble PARENTESIS_C
                | R_MAX PARENTESIS_A arreglodouble PARENTESIS_C
                | R_MIN PARENTESIS_A arreglodouble PARENTESIS_C
;
arreglodouble ::= ARROBA ID
                | CORCHETE_A valoresnumeros CORCHETE_C
;
impresiones ::= imprimirexpresiones
            | imprimirarreglos
;

imprimirexpresiones ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_PRINT IGUAL listaexpresiones R_END PUNTOYCOMA
;
listaexpresiones ::= expresiones
                    | expresiones COMA listaexpresiones 
;
expresiones ::= numero
            | CADENA
            | funcionesop  
            | funcionesest
;
imprimirarreglos ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena GUION_MEDIO MAYOR ARROBA ID R_END PUNTOYCOMA
                    | R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena GUION_MEDIO MAYOR CORCHETE_A valoresnumeros CORCHETE_C R_END PUNTOYCOMA
;