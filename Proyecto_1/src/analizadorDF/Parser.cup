// ------------  Paquete e importaciones ------------
package analizadorDF;

import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.LinkedList;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funcionalidad.Funcion.addErroresLista("Sintactico",(String) s.value, s.right, s.left );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
           System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           funcionalidad.Funcion.addErroresLista( "Sintactico",(String) s.value, s.right, s.left );
           JOptionPane.showMessageDialog(null, "Error sintactico: No se pudo recuperar. Por favor corregir el error", (String) s.value, JOptionPane.ERROR_MESSAGE);
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String IGUAL;
terminal String PUNTOYCOMA;
terminal String PARENTESIS_A;
terminal String PARENTESIS_C;
terminal String MAYOR;
terminal String MENOR;
terminal String PUNTO;
terminal String DOSPUNTOS;
terminal String ADMIRACION;
terminal String COMA;
terminal String CORCHETE_A;
terminal String CORCHETE_C;
terminal String GUION_MEDIO;
terminal String ARROBA;

terminal String R_PROGRAM; 
terminal String R_END; 
terminal String R_CHAR;  
terminal String R_VAR;  
terminal String R_DOUBLE;  
terminal String R_ARR; 
terminal String R_SUM;  
terminal String R_RES;  
terminal String R_MUL;  
terminal String R_DIV;  
terminal String R_MOD; 
terminal String R_MEDIA;  
terminal String R_MEDIANA; 
terminal String R_MODA; 
terminal String R_VARIANZA;  
terminal String R_MAX; 
terminal String R_MIN;
terminal String R_CONSOLE;  
terminal String R_PRINT;  
terminal String R_COLUMN; 
terminal String R_EXEC; 
terminal String R_VALUES; 
terminal String R_TITULO; 
terminal String R_LABEL; 
terminal String R_EJEX; 
terminal String R_EJEY; 
terminal String R_TITULOX; 
terminal String R_TITULOY; 
terminal String R_HISTOGRAM; 
terminal String R_GLINE;
terminal String R_GPIE;
terminal String R_GBAR;
 

terminal String ENTERO; 
terminal String CADENA;   
terminal String DECIMALES; 
terminal String ID; 

//------> Declaración de no terminales
non terminal inicio;
non terminal codigo;
non terminal instruccion;
non terminal declaracion;
non terminal numero;
non terminal cadena;
non terminal arreglos;
non terminal valoresnumeros;
non terminal valorescadenas;
non terminal listanum;
non terminal operaciones;
non terminal funcionesop;
non terminal parametrosop;

//------> PRECEDENCIA
//precedence left MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, IGUAL_IGUAL, DISTINTO;
//precedence left OR, AND;
//precedence left NOT;
//precedence left SUMA;
//precedence left RESTA;
//precedence left MULTIPLICACION;
//precedence left DIVISION;
//precedence left RESTA;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------
//{:  func.Traduccion.traducciones = tod; :}
inicio ::= R_PROGRAM codigo:tod R_END R_PROGRAM                                     //     {: LinkedList<String> ls20 = new LinkedList<>(); ls20.add("def main():"); func.Traduccion.cn++; ls20.addAll(func.Traduccion.addTabula(tod)); func.Traduccion.cn--; ls20.add("if__name__ = \"__main__\":\n\tmain()"); func.Traduccion.traducciones = ls20; :}
;
codigo ::= codigo:tod instruccion:sol                                               // {: tod.addAll((LinkedList) sol); RESULT = (LinkedList) tod; :} 
        | instruccion:sol                                                           // {: LinkedList<String> tod = new LinkedList<>(); tod.addAll((LinkedList) sol); RESULT = (LinkedList) tod; :} 
;
instruccion ::= declaracion
;
declaracion ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO numero R_END PUNTOYCOMA
              | R_VAR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO cadena R_END PUNTOYCOMA
;
numero ::= ENTERO 
        | DECIMALES 
        | ID
;
cadena ::= CADENA 
        | ID
;
arreglos ::= R_ARR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO CORCHETE_A valoresnumeros CORCHETE_C R_END PUNTOYCOMA
        | R_ARR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO CORCHETE_A valorescadenas CORCHETE_C R_END PUNTOYCOMA
;
valoresnumeros ::= listanum
                | listanum COMA valoresnumeros
;
listanum ::= ENTERO 
            | DECIMALES 
            | ID 
            | funcionesop
;
valorescadenas ::= cadena
            | cadena COMA valorescadenas
;
operaciones ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesop R_END PUNTOYCOMA
;
funcionesop ::= R_SUM PARENTESIS_A parametrosop PARENTESIS_C
            | R_RES PARENTESIS_A parametrosop PARENTESIS_C
            | R_MUL PARENTESIS_A parametrosop PARENTESIS_C
            | R_DIV PARENTESIS_A parametrosop PARENTESIS_C
            | R_MOD PARENTESIS_A parametrosop PARENTESIS_C
;
parametrosop ::= listanum COMA listanum
; 
