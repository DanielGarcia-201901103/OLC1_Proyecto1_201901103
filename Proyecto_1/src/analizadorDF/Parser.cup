// ------------  Paquete e importaciones ------------
package analizadorDF;

import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.LinkedList;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funcionalidad.Funcion.addErroresLista("Sintactico",(String) s.value, s.right, s.left );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
           System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           funcionalidad.Funcion.addErroresLista( "Sintactico",(String) s.value, s.right, s.left );
           JOptionPane.showMessageDialog(null, "Error sintactico: No se pudo recuperar. Por favor corregir el error", (String) s.value, JOptionPane.ERROR_MESSAGE);
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String IGUAL;
terminal String PUNTOYCOMA;
terminal String PARENTESIS_A;
terminal String PARENTESIS_C;
terminal String MAYOR;
terminal String MENOR;
terminal String DOSPUNTOS;
terminal String COMA;
terminal String CORCHETE_A;
terminal String CORCHETE_C;
terminal String GUION_MEDIO;
terminal String ARROBA;

terminal String R_PROGRAM; 
terminal String R_END; 
terminal String R_CHAR;  
terminal String R_VAR;  
terminal String R_DOUBLE;  
terminal String R_ARR; 
terminal String R_SUM;  
terminal String R_RES;  
terminal String R_MUL;  
terminal String R_DIV;  
terminal String R_MOD; 
terminal String R_MEDIA;  
terminal String R_MEDIANA; 
terminal String R_MODA; 
terminal String R_VARIANZA;  
terminal String R_MAX; 
terminal String R_MIN;
terminal String R_CONSOLE;  
terminal String R_PRINT;  
terminal String R_COLUMN; 
terminal String R_EXEC; 
terminal String R_VALUES; 
terminal String R_TITULO; 
terminal String R_LABEL; 
terminal String R_EJEX; 
terminal String R_EJEY; 
terminal String R_TITULOX; 
terminal String R_TITULOY; 
terminal String R_HISTOGRAM; 
terminal String R_GLINE;
terminal String R_GPIE;
terminal String R_GBAR;
 

terminal String ENTERO; 
terminal String CADENA;   
terminal String DECIMALES; 
terminal String ID; 

//------> Declaración de no terminales
non terminal inicio;
non terminal codigo;
non terminal instruccion;
non terminal declaracion;
non terminal numero;
non terminal cadena;
non terminal arreglos;
non terminal valoresnumeros;
non terminal valorescadenas;
non terminal listanum;
non terminal operaciones;
non terminal funcionesop;
non terminal impresiones;
non terminal imprimirexpresiones;
non terminal imprimirarreglos;
non terminal listaexpresiones;
non terminal expresioness;
non terminal funcionesest;
non terminal arreglodouble;
non terminal funcgrafic;
non terminal sentenciasgbar;
non terminal sentenciasgpie;
non terminal sentenciasgline;
non terminal sentenciashistogram;
non terminal sentencgbar;
non terminal sentencgpie;
non terminal sentencgline;
non terminal sentenchistogram;
non terminal arregloccc;

//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------
inicio ::= R_PROGRAM codigo R_END R_PROGRAM   {: funcionalidad.Funcion.obtenerLImpresion();:}                        
;
codigo ::= codigo instruccion                                               
        | instruccion                                                           
;
instruccion ::= funcgrafic
                | declaracion
                | arreglos
                | operaciones
                | impresiones
;
declaracion ::= R_VAR:pos1 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID:nomvariable MENOR GUION_MEDIO numero:valorrecibido R_END PUNTOYCOMA                       {: funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable.toLowerCase(), valorrecibido, "variable double", pos1right,  pos1left); :}
              | R_VAR:pos2 DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ID:nomvariable1 MENOR GUION_MEDIO cadena:datorecibido R_END PUNTOYCOMA   {: funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable1.toLowerCase(), datorecibido, "variable string", pos2right,  pos2left); :}
              | error PUNTOYCOMA
;
numero ::= DECIMALES:v1                                                         {: RESULT = Double.parseDouble(v1); :} 
        | ENTERO:v2                                                             {: RESULT = Integer.valueOf(v2); :}
        | ID:v3                                                                 {: RESULT = Double.parseDouble(funcionalidad.Funcion.buscarValordId("decVariables",v3.toLowerCase()).toString()); :}
;
cadena ::= CADENA:v4                                                            {: RESULT = v4.replace("\"",""); :} 
        | ID:v5                                                                 {: RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v5.toLowerCase()); :} 
;
arreglos ::= R_ARR:pos3 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable2 MENOR GUION_MEDIO CORCHETE_A valoresnumeros:valorrecibido1 CORCHETE_C R_END PUNTOYCOMA                        {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable2),(LinkedList<Object>)valorrecibido1, "arreglo double", pos3right,  pos3left);  :}
        | R_ARR:pos4 DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable3 MENOR GUION_MEDIO CORCHETE_A valorescadenas:datorecibido1 CORCHETE_C R_END PUNTOYCOMA        {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable3),(LinkedList<Object>) datorecibido1, "arreglo string", pos4right,  pos4left);  :}
        | R_ARR:pos5 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable4 MENOR GUION_MEDIO ARROBA ID:v6 R_END PUNTOYCOMA                                                                  {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable4),(LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(v6.toLowerCase())),"arreglo double", pos5right,  pos5left ); :}
        | R_ARR:pos6 DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID:nombrevariable5 MENOR GUION_MEDIO ARROBA ID:v7 R_END PUNTOYCOMA                                              {: funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable5),(LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(v7.toLowerCase())),"arreglo string", pos6right,  pos6left ); :}
        | error PUNTOYCOMA
;
valoresnumeros ::= listanum:vn1                                                 {: LinkedList<Object> advnumeros = new LinkedList<Object>(); advnumeros.add(vn1); RESULT = (LinkedList<Object>) advnumeros;  :}
                | listanum:vn2 COMA valoresnumeros:vn3                          {: LinkedList<Object> advnumeros1 = new LinkedList<Object>(); advnumeros1.add(vn2); advnumeros1.addAll((LinkedList)vn3); RESULT = (LinkedList<Object>) advnumeros1; :} 
;
listanum ::= funcionesop:resultfunop                                            {: RESULT = Double.parseDouble(resultfunop.toString()); :}                                            
            | funcionesest:resultfunest                                         {: RESULT = Double.parseDouble(resultfunest.toString()) ; :} 
            | DECIMALES:v8                                                      {: RESULT = Double.parseDouble(v8); :} 
            | ENTERO:v9                                                         {: RESULT = Integer.valueOf(v9); :} 
            | ID:v10                                                            {: RESULT = Double.parseDouble(funcionalidad.Funcion.buscarValordId("decVariables",v10.toLowerCase()).toString()); :} 
;
valorescadenas ::= cadena:vn4                                                   {: LinkedList<Object> advnumeros2 = new LinkedList<Object>(); advnumeros2.add(vn4);  RESULT = (LinkedList<Object>) advnumeros2;  :}                  
            | cadena:vn5 COMA valorescadenas:vn6                                {: LinkedList<Object> advnumeros3 = new LinkedList<Object>(); advnumeros3.add(vn5); advnumeros3.addAll((LinkedList)vn6); RESULT = (LinkedList<Object>) advnumeros3; :}  
;
operaciones ::= R_VAR:pos7 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID:nombrevariable6 MENOR GUION_MEDIO funcionesop:rf1 R_END PUNTOYCOMA {: funcionalidad.Funcion.addHMSimbolos("decVariables", nombrevariable6.toLowerCase(), rf1, "variable double", pos7right,  pos7left); :}
            | R_VAR:pos8 DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID:nombrevariable7 MENOR GUION_MEDIO funcionesest:rf2 R_END PUNTOYCOMA  {: funcionalidad.Funcion.addHMSimbolos("decVariables", nombrevariable7.toLowerCase(), rf2, "variable double", pos8right,  pos8left); :}
            | error PUNTOYCOMA
;
funcionesop ::= R_SUM PARENTESIS_A listanum:pa COMA listanum:pb PARENTESIS_C    {: RESULT = funcionalidad.Operacion.Suma(Double.parseDouble(pa.toString()),Double.parseDouble(pb.toString())); :}
            | R_RES PARENTESIS_A listanum:pa1 COMA listanum:pb1 PARENTESIS_C    {: RESULT = funcionalidad.Operacion.Resta(Double.parseDouble(pa1.toString()),Double.parseDouble(pb1.toString())); :}
            | R_MUL PARENTESIS_A listanum:pa2 COMA listanum:pb2 PARENTESIS_C    {: RESULT = funcionalidad.Operacion.Multiplicacion(Double.parseDouble(pa2.toString()),Double.parseDouble(pb2.toString())); :}
            | R_DIV PARENTESIS_A listanum:pa3 COMA listanum:pb3 PARENTESIS_C    {: RESULT = funcionalidad.Operacion.Division(Double.parseDouble(pa3.toString()),Double.parseDouble(pb3.toString())); :}
            | R_MOD PARENTESIS_A listanum:pa4 COMA listanum:pb4 PARENTESIS_C    {: RESULT = funcionalidad.Operacion.Modulo(Double.parseDouble(pa4.toString()),Double.parseDouble(pb4.toString())); :}
;
funcionesest ::= R_MEDIA PARENTESIS_A arreglodouble:ar1 PARENTESIS_C            {: RESULT = funcionalidad.Operacion.Media((LinkedList<Object>) ar1); :}
                | R_MEDIANA PARENTESIS_A arreglodouble:ar2 PARENTESIS_C         {: RESULT = funcionalidad.Operacion.Mediana((LinkedList<Object>) ar2); :}
                | R_MODA PARENTESIS_A arreglodouble:ar3 PARENTESIS_C            {: RESULT = funcionalidad.Operacion.Moda((LinkedList<Object>) ar3); :}
                | R_VARIANZA PARENTESIS_A arreglodouble:ar4 PARENTESIS_C        {: RESULT = funcionalidad.Operacion.Varianza((LinkedList<Object>) ar4); :}
                | R_MAX PARENTESIS_A arreglodouble:ar5 PARENTESIS_C             {: RESULT = funcionalidad.Operacion.Max((LinkedList<Object>) ar5); :}
                | R_MIN PARENTESIS_A arreglodouble:ar6 PARENTESIS_C             {: RESULT = funcionalidad.Operacion.Min((LinkedList<Object>) ar6); :}
;
arreglodouble ::= ARROBA ID:vbusc                                               {: RESULT = (LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(vbusc.toLowerCase())); :}
                | CORCHETE_A valoresnumeros:arrobt CORCHETE_C                   {: RESULT = (LinkedList<Object>) arrobt; :}
;
impresiones ::= imprimirexpresiones
            | imprimirarreglos
;

imprimirexpresiones ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_PRINT IGUAL listaexpresiones:lexp R_END PUNTOYCOMA {: funcionalidad.Funcion.addImpresiones((LinkedList<Object>) lexp);:}
                        | error PUNTOYCOMA
;
listaexpresiones ::= expresioness:vn7                                           {: LinkedList<Object> advnumeros4 = new LinkedList<Object>(); advnumeros4.add(vn7);  RESULT = (LinkedList<Object>) advnumeros4;  :}                  
                    | expresioness:vn8 COMA listaexpresiones:vn9                    {: LinkedList<Object> advnumeros5 = new LinkedList<Object>(); advnumeros5.add(vn8); advnumeros5.addAll((LinkedList)vn9); RESULT = (LinkedList<Object>) advnumeros5; :}  
;
expresioness ::=  CADENA:datito                                                 {: RESULT = datito.replace("\"",""); :}
            | funcionesop:resultfunop1                                          {: RESULT = Double.parseDouble(resultfunop1.toString()); :}  
            | funcionesest:resultfunest1                                        {: RESULT = Double.parseDouble(resultfunest1.toString()) ; :} 
            | DECIMALES:v11                                                     {: RESULT = Double.parseDouble(v11); :} 
            | ENTERO:v12                                                        {: RESULT = Integer.valueOf(v12); :} 
            | ID:v13                                                            {: RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v13.toLowerCase()); :} 
;
imprimirarreglos ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena:titimp GUION_MEDIO MAYOR ARROBA ID:bid R_END PUNTOYCOMA {:funcionalidad.Funcion.addImpresionesCol(titimp.toString(), (LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(bid.toLowerCase()))); :}
                    | R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena:titimp1 GUION_MEDIO MAYOR CORCHETE_A valoresnumeros:drecib CORCHETE_C R_END PUNTOYCOMA {:funcionalidad.Funcion.addImpresionesCol(titimp1.toString(), (LinkedList<Object>) drecib);:}
                    | error PUNTOYCOMA
;
//FALTA AGREGAR LO DE LA LISTA DE CADENAS A LAS IMPRESIONES DE ARREGLOS EN EL NO TERMINAL DE LA LINEA ANTERIOR
funcgrafic ::= R_GBAR PARENTESIS_A sentenciasgbar R_EXEC R_GBAR R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA                        {: funcionalidad.Grafica.barras(); :}
            | R_GPIE PARENTESIS_A sentenciasgpie R_EXEC R_GPIE R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA                         {: funcionalidad.Grafica.gPie(); :}
            | R_GLINE PARENTESIS_A sentenciasgline R_EXEC R_GLINE R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA                      {: funcionalidad.Grafica.gLine(); :}
            | R_HISTOGRAM PARENTESIS_A sentenciashistogram R_EXEC R_HISTOGRAM R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA          {: funcionalidad.Grafica.gHisto(); :}
            | error PUNTOYCOMA
;
sentenciasgbar ::= sentenciasgbar sentencgbar
                | sentencgbar
;
sentencgbar ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:tttl R_END PUNTOYCOMA                                    {: funcionalidad.Grafica.tituloBarras = tttl.toString(); :}
                | R_EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arregloccc:vbaaa R_END PUNTOYCOMA     {: funcionalidad.Grafica.igualarExb((LinkedList<Object>) vbaaa); :}
                | R_EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL  arreglodouble:vbaaa1 R_END PUNTOYCOMA                        {: funcionalidad.Grafica.igualarEyb((LinkedList<Object>) vbaaa1); :}
                | R_TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:tttlx R_END PUNTOYCOMA                                {: funcionalidad.Grafica.tituloxBarras = tttlx.toString(); :}
                | R_TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:tttly R_END PUNTOYCOMA                                {: funcionalidad.Grafica.tituloyBarras = tttly.toString(); :}
                | error PUNTOYCOMA
;
arregloccc ::= ARROBA ID:vbusc                                               {: RESULT = (LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(vbusc.toLowerCase())); :}
                | CORCHETE_A valorescadenas:arrobt CORCHETE_C                   {: RESULT = (LinkedList<Object>) arrobt; :}
;
sentenciasgpie ::= sentenciasgpie sentencgpie
                | sentencgpie
;
sentencgpie ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:ttt2 R_END PUNTOYCOMA          {: funcionalidad.Grafica.tituloPie = ttt2.toString(); :}
                | R_VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL arreglodouble:lvap R_END PUNTOYCOMA                     {: funcionalidad.Grafica.igualarvalPie((LinkedList<Object>) lvap); :}
                | R_LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arregloccc:llap R_END PUNTOYCOMA     {: funcionalidad.Grafica.igualarLaPie((LinkedList<Object>) llap); :}
                | error PUNTOYCOMA
;
sentenciasgline ::= sentenciasgline sentencgline
                | sentencgline
;
sentencgline ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:ttt3 R_END PUNTOYCOMA        {: funcionalidad.Grafica.tituloLine = ttt3.toString(); :}
                | R_EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arregloccc:laline R_END PUNTOYCOMA   {: funcionalidad.Grafica.igualarExL((LinkedList<Object>) laline); :}
                | R_EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL arreglodouble:laline1 R_END PUNTOYCOMA                   {: funcionalidad.Grafica.igualarEyL((LinkedList<Object>) laline1); :}
                | R_TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:ttt4 R_END PUNTOYCOMA      {: funcionalidad.Grafica.tituloxLine = ttt4.toString(); :}
                | R_TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:ttt5 R_END PUNTOYCOMA      {: funcionalidad.Grafica.tituloyLine = ttt5.toString(); :}
                | error PUNTOYCOMA
;
sentenciashistogram ::= sentenciashistogram sentenchistogram
                | sentenchistogram
;
sentenchistogram ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena:ttt6 R_END PUNTOYCOMA       {: funcionalidad.Grafica.tituloHisto = ttt6.toString(); :}
                | R_VALUES DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arreglodouble:lahist R_END PUNTOYCOMA {: funcionalidad.Grafica.igualarvalHist((LinkedList<Object>) lahist); :}
                | error PUNTOYCOMA
;
