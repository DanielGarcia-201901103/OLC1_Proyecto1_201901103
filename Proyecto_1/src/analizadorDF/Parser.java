
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorDF;

import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\015\000" +
    "\002\005\017\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\020\000\002\010\022\000\002\010\017\000\002\010\021" +
    "\000\002\011\003\000\002\011\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\012\003\000\002\012\005\000\002\014" +
    "\015\000\002\014\015\000\002\015\010\000\002\015\010" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\023\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\024" +
    "\004\000\002\024\005\000\002\016\003\000\002\016\003" +
    "\000\002\017\012\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\020\016\000\002\020\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\022\004\001\002\000\010\025\013\027" +
    "\007\043\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\013\224\001\002\000\004\013" +
    "\170\001\002\000\012\023\uffd6\025\uffd6\027\uffd6\043\uffd6" +
    "\001\002\000\012\023\ufffe\025\ufffe\027\ufffe\043\ufffe\001" +
    "\002\000\004\013\025\001\002\000\012\023\ufffd\025\ufffd" +
    "\027\ufffd\043\ufffd\001\002\000\012\023\ufffc\025\ufffc\027" +
    "\ufffc\043\ufffc\001\002\000\012\023\ufffb\025\ufffb\027\ufffb" +
    "\043\ufffb\001\002\000\012\023\uffd5\025\uffd5\027\uffd5\043" +
    "\uffd5\001\002\000\012\023\023\025\013\027\007\043\010" +
    "\001\002\000\012\023\ufffa\025\ufffa\027\ufffa\043\ufffa\001" +
    "\002\000\012\023\uffff\025\uffff\027\uffff\043\uffff\001\002" +
    "\000\004\022\024\001\002\000\004\002\000\001\002\000" +
    "\006\024\026\026\027\001\002\000\004\016\154\001\002" +
    "\000\004\013\030\001\002\000\004\013\031\001\002\000" +
    "\004\065\032\001\002\000\004\011\033\001\002\000\004" +
    "\020\034\001\002\000\036\030\036\031\040\032\053\033" +
    "\051\034\042\035\045\036\044\037\046\040\037\041\043" +
    "\042\035\062\041\064\055\065\050\001\002\000\004\006" +
    "\151\001\002\000\004\006\144\001\002\000\004\006\141" +
    "\001\002\000\004\006\134\001\002\000\006\015\ufff6\023" +
    "\ufff6\001\002\000\004\006\127\001\002\000\004\006\124" +
    "\001\002\000\004\006\121\001\002\000\004\006\116\001" +
    "\002\000\004\006\103\001\002\000\004\023\101\001\002" +
    "\000\006\015\ufff5\023\ufff5\001\002\000\004\006\074\001" +
    "\002\000\004\023\072\001\002\000\004\006\060\001\002" +
    "\000\004\023\056\001\002\000\006\015\ufff7\023\ufff7\001" +
    "\002\000\004\005\057\001\002\000\012\023\uffe4\025\uffe4" +
    "\027\uffe4\043\uffe4\001\002\000\036\030\036\031\040\032" +
    "\053\033\051\034\042\035\045\036\044\037\046\040\037" +
    "\041\043\042\035\062\061\064\066\065\062\001\002\000" +
    "\010\007\uffe9\015\uffe9\017\uffe9\001\002\000\010\007\uffe8" +
    "\015\uffe8\017\uffe8\001\002\000\010\007\uffec\015\uffec\017" +
    "\uffec\001\002\000\004\015\067\001\002\000\010\007\uffeb" +
    "\015\uffeb\017\uffeb\001\002\000\010\007\uffea\015\uffea\017" +
    "\uffea\001\002\000\036\030\036\031\040\032\053\033\051" +
    "\034\042\035\045\036\044\037\046\040\037\041\043\042" +
    "\035\062\061\064\066\065\062\001\002\000\004\007\071" +
    "\001\002\000\012\007\uffe1\015\uffe1\017\uffe1\023\uffe1\001" +
    "\002\000\004\005\073\001\002\000\012\023\uffe5\025\uffe5" +
    "\027\uffe5\043\uffe5\001\002\000\036\030\036\031\040\032" +
    "\053\033\051\034\042\035\045\036\044\037\046\040\037" +
    "\041\043\042\035\062\061\064\066\065\062\001\002\000" +
    "\004\015\076\001\002\000\036\030\036\031\040\032\053" +
    "\033\051\034\042\035\045\036\044\037\046\040\037\041" +
    "\043\042\035\062\061\064\066\065\062\001\002\000\004" +
    "\007\100\001\002\000\012\007\uffe0\015\uffe0\017\uffe0\023" +
    "\uffe0\001\002\000\004\005\102\001\002\000\012\023\ufff9" +
    "\025\ufff9\027\ufff9\043\ufff9\001\002\000\006\016\105\021" +
    "\104\001\002\000\004\065\115\001\002\000\036\030\036" +
    "\031\040\032\053\033\051\034\042\035\045\036\044\037" +
    "\046\040\037\041\043\042\035\062\061\064\066\065\062" +
    "\001\002\000\004\007\107\001\002\000\012\007\uffdc\015" +
    "\uffdc\017\uffdc\023\uffdc\001\002\000\006\015\113\017\uffee" +
    "\001\002\000\004\017\112\001\002\000\004\007\uffd7\001" +
    "\002\000\036\030\036\031\040\032\053\033\051\034\042" +
    "\035\045\036\044\037\046\040\037\041\043\042\035\062" +
    "\061\064\066\065\062\001\002\000\004\017\uffed\001\002" +
    "\000\004\007\uffd8\001\002\000\006\016\105\021\104\001" +
    "\002\000\004\007\120\001\002\000\012\007\uffde\015\uffde" +
    "\017\uffde\023\uffde\001\002\000\006\016\105\021\104\001" +
    "\002\000\004\007\123\001\002\000\012\007\uffdd\015\uffdd" +
    "\017\uffdd\023\uffdd\001\002\000\006\016\105\021\104\001" +
    "\002\000\004\007\126\001\002\000\012\007\uffda\015\uffda" +
    "\017\uffda\023\uffda\001\002\000\036\030\036\031\040\032" +
    "\053\033\051\034\042\035\045\036\044\037\046\040\037" +
    "\041\043\042\035\062\061\064\066\065\062\001\002\000" +
    "\004\015\131\001\002\000\036\030\036\031\040\032\053" +
    "\033\051\034\042\035\045\036\044\037\046\040\037\041" +
    "\043\042\035\062\061\064\066\065\062\001\002\000\004" +
    "\007\133\001\002\000\012\007\uffdf\015\uffdf\017\uffdf\023" +
    "\uffdf\001\002\000\036\030\036\031\040\032\053\033\051" +
    "\034\042\035\045\036\044\037\046\040\037\041\043\042" +
    "\035\062\061\064\066\065\062\001\002\000\004\015\136" +
    "\001\002\000\036\030\036\031\040\032\053\033\051\034" +
    "\042\035\045\036\044\037\046\040\037\041\043\042\035" +
    "\062\061\064\066\065\062\001\002\000\004\007\140\001" +
    "\002\000\012\007\uffe2\015\uffe2\017\uffe2\023\uffe2\001\002" +
    "\000\006\016\105\021\104\001\002\000\004\007\143\001" +
    "\002\000\012\007\uffdb\015\uffdb\017\uffdb\023\uffdb\001\002" +
    "\000\036\030\036\031\040\032\053\033\051\034\042\035" +
    "\045\036\044\037\046\040\037\041\043\042\035\062\061" +
    "\064\066\065\062\001\002\000\004\015\146\001\002\000" +
    "\036\030\036\031\040\032\053\033\051\034\042\035\045" +
    "\036\044\037\046\040\037\041\043\042\035\062\061\064" +
    "\066\065\062\001\002\000\004\007\150\001\002\000\012" +
    "\007\uffe3\015\uffe3\017\uffe3\023\uffe3\001\002\000\006\016" +
    "\105\021\104\001\002\000\004\007\153\001\002\000\012" +
    "\007\uffd9\015\uffd9\017\uffd9\023\uffd9\001\002\000\004\017" +
    "\155\001\002\000\004\013\156\001\002\000\004\013\157" +
    "\001\002\000\004\065\160\001\002\000\004\011\161\001" +
    "\002\000\004\020\162\001\002\000\006\063\165\065\163" +
    "\001\002\000\012\015\ufff3\017\ufff3\020\ufff3\023\ufff3\001" +
    "\002\000\004\023\166\001\002\000\012\015\ufff4\017\ufff4" +
    "\020\ufff4\023\ufff4\001\002\000\004\005\167\001\002\000" +
    "\012\023\ufff8\025\ufff8\027\ufff8\043\ufff8\001\002\000\004" +
    "\013\171\001\002\000\006\044\173\045\172\001\002\000" +
    "\004\004\207\001\002\000\004\004\174\001\002\000\040" +
    "\030\036\031\040\032\053\033\051\034\042\035\045\036" +
    "\044\037\046\040\037\041\043\042\035\062\041\063\176" +
    "\064\055\065\050\001\002\000\006\015\205\023\uffd3\001" +
    "\002\000\006\015\uffd0\023\uffd0\001\002\000\004\023\203" +
    "\001\002\000\006\015\uffd1\023\uffd1\001\002\000\006\015" +
    "\uffce\023\uffce\001\002\000\006\015\uffcf\023\uffcf\001\002" +
    "\000\004\005\204\001\002\000\012\023\uffd4\025\uffd4\027" +
    "\uffd4\043\uffd4\001\002\000\040\030\036\031\040\032\053" +
    "\033\051\034\042\035\045\036\044\037\046\040\037\041" +
    "\043\042\035\062\041\063\176\064\055\065\050\001\002" +
    "\000\004\023\uffd2\001\002\000\006\063\165\065\163\001" +
    "\002\000\004\020\211\001\002\000\004\010\212\001\002" +
    "\000\006\016\214\021\213\001\002\000\004\065\221\001" +
    "\002\000\036\030\036\031\040\032\053\033\051\034\042" +
    "\035\045\036\044\037\046\040\037\041\043\042\035\062" +
    "\061\064\066\065\062\001\002\000\004\017\216\001\002" +
    "\000\004\023\217\001\002\000\004\005\220\001\002\000" +
    "\012\023\uffcc\025\uffcc\027\uffcc\043\uffcc\001\002\000\004" +
    "\023\222\001\002\000\004\005\223\001\002\000\012\023" +
    "\uffcd\025\uffcd\027\uffcd\043\uffcd\001\002\000\006\024\225" +
    "\026\226\001\002\000\004\016\246\001\002\000\004\013" +
    "\227\001\002\000\004\013\230\001\002\000\004\021\231" +
    "\001\002\000\004\065\232\001\002\000\004\011\233\001" +
    "\002\000\004\020\234\001\002\000\006\016\236\021\235" +
    "\001\002\000\004\065\243\001\002\000\036\030\036\031" +
    "\040\032\053\033\051\034\042\035\045\036\044\037\046" +
    "\040\037\041\043\042\035\062\061\064\066\065\062\001" +
    "\002\000\004\017\240\001\002\000\004\023\241\001\002" +
    "\000\004\005\242\001\002\000\012\023\ufff2\025\ufff2\027" +
    "\ufff2\043\ufff2\001\002\000\004\023\244\001\002\000\004" +
    "\005\245\001\002\000\012\023\ufff0\025\ufff0\027\ufff0\043" +
    "\ufff0\001\002\000\004\017\247\001\002\000\004\013\250" +
    "\001\002\000\004\013\251\001\002\000\004\021\252\001" +
    "\002\000\004\065\253\001\002\000\004\011\254\001\002" +
    "\000\004\020\255\001\002\000\006\016\257\021\256\001" +
    "\002\000\004\065\267\001\002\000\006\063\165\065\163" +
    "\001\002\000\006\015\265\017\uffe7\001\002\000\004\017" +
    "\262\001\002\000\004\023\263\001\002\000\004\005\264" +
    "\001\002\000\012\023\ufff1\025\ufff1\027\ufff1\043\ufff1\001" +
    "\002\000\006\063\165\065\163\001\002\000\004\017\uffe6" +
    "\001\002\000\004\023\270\001\002\000\004\005\271\001" +
    "\002\000\012\023\uffef\025\uffef\027\uffef\043\uffef\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\002\004\001\001\000\022\003\017\004" +
    "\011\005\013\010\014\014\015\016\020\017\010\020\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\021\005\013" +
    "\010\014\014\015\016\020\017\010\020\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\046\015\051\023\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\063\015\062\023\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\067\015\062" +
    "\023\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\074\015\062" +
    "\023\064\001\001\000\002\001\001\000\010\013\076\015" +
    "\062\023\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\105\001" +
    "\001\000\002\001\001\000\012\011\110\013\107\015\062" +
    "\023\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\113\013\107\015\062\023\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\127\015" +
    "\062\023\064\001\001\000\002\001\001\000\010\013\131" +
    "\015\062\023\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\134\015\062\023\064\001\001\000\002" +
    "\001\001\000\010\013\136\015\062\023\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\144\015" +
    "\062\023\064\001\001\000\002\001\001\000\010\013\146" +
    "\015\062\023\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\177\015\201\021\176\022\174" +
    "\023\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\177\015\201\021\205\022\174\023\200\001\001\000\002" +
    "\001\001\000\004\007\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\214\013\107\015\062\023\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\236\013\107\015\062\023\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\257\012\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\257\012\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funcionalidad.Funcion.addErroresLista("Sintactico",(String) s.value, s.right, s.left );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
           System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           funcionalidad.Funcion.addErroresLista( "Sintactico",(String) s.value, s.right, s.left );
           JOptionPane.showMessageDialog(null, "Error sintactico: No se pudo recuperar. Por favor corregir el error", (String) s.value, JOptionPane.ERROR_MESSAGE);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= R_PROGRAM codigo R_END R_PROGRAM 
            {
              Object RESULT =null;
		int todleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int todright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= codigo instruccion 
            {
              Object RESULT =null;
		int todleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int todright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int solleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int solright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= instruccion 
            {
              Object RESULT =null;
		int solleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int solright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= operaciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO numero R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int pos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String pos1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int nomvariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nomvariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nomvariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valorrecibidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorrecibidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valorrecibido = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(nomvariable+" " +String.valueOf(valorrecibido));funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable, String.valueOf(valorrecibido), "variable double", pos1right,  pos1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= R_VAR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String pos2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nomvariable1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nomvariable1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nomvariable1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int datorecibidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datorecibidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object datorecibido = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println(nomvariable1+" " +String.valueOf(datorecibido));funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable1, String.valueOf(datorecibido), "variable string", pos2right,  pos2left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // numero ::= DECIMALES 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numero ::= ENTERO 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numero ::= ID 
            {
              Object RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cadena ::= CADENA 
            {
              Object RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v4; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadena",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cadena ::= ID 
            {
              Object RESULT =null;
		int v5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v5); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadena",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arreglos ::= R_ARR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO CORCHETE_A valoresnumeros CORCHETE_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arreglos ::= R_ARR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO CORCHETE_A valorescadenas CORCHETE_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arreglos ::= R_ARR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO ARROBA ID R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arreglos ::= R_ARR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO ARROBA ID R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valoresnumeros ::= listanum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresnumeros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valoresnumeros ::= listanum COMA valoresnumeros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresnumeros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listanum ::= funcionesop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listanum ::= funcionesest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listanum ::= DECIMALES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listanum ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listanum ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valorescadenas ::= cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorescadenas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valorescadenas ::= cadena COMA valorescadenas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorescadenas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesop R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operaciones ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesest R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcionesop ::= R_SUM PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcionesop ::= R_RES PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcionesop ::= R_MUL PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcionesop ::= R_DIV PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcionesop ::= R_MOD PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcionesest ::= R_MEDIA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcionesest ::= R_MEDIANA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcionesest ::= R_MODA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcionesest ::= R_VARIANZA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcionesest ::= R_MAX PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcionesest ::= R_MIN PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arreglodouble ::= ARROBA ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglodouble",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arreglodouble ::= CORCHETE_A valoresnumeros CORCHETE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglodouble",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // impresiones ::= imprimirexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // impresiones ::= imprimirarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // imprimirexpresiones ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_PRINT IGUAL listaexpresiones R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirexpresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaexpresiones ::= expresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaexpresiones ::= expresiones COMA listaexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresiones ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresiones ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresiones ::= funcionesop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresiones ::= funcionesest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresiones",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // imprimirarreglos ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena GUION_MEDIO MAYOR ARROBA ID R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirarreglos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // imprimirarreglos ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena GUION_MEDIO MAYOR CORCHETE_A valoresnumeros CORCHETE_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirarreglos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
