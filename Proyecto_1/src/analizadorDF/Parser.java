
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorDF;

import java_cup.runtime.*;
import javax.swing.JOptionPane;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\005\015\000\002\005\017\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\020\000\002\010\022" +
    "\000\002\010\017\000\002\010\021\000\002\011\003\000" +
    "\002\011\005\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\012" +
    "\003\000\002\012\005\000\002\014\015\000\002\014\015" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\024\004\000\002\024\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\012\000" +
    "\002\021\003\000\002\021\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\020\016\000\002\020\017" +
    "\000\002\025\014\000\002\025\014\000\002\025\014\000" +
    "\002\025\014\000\002\025\004\000\002\026\004\000\002" +
    "\026\003\000\002\032\014\000\002\032\014\000\002\032" +
    "\012\000\002\032\014\000\002\032\014\000\002\032\004" +
    "\000\002\036\004\000\002\036\005\000\002\027\004\000" +
    "\002\027\003\000\002\033\014\000\002\033\012\000\002" +
    "\033\014\000\002\033\004\000\002\030\004\000\002\030" +
    "\003\000\002\034\014\000\002\034\014\000\002\034\012" +
    "\000\002\034\014\000\002\034\014\000\002\034\004\000" +
    "\002\031\004\000\002\031\003\000\002\035\014\000\002" +
    "\035\012\000\002\035\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0188\000\004\020\004\001\002\000\022\003\022\023" +
    "\017\025\010\041\011\054\024\055\014\056\013\057\016" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\024\003\ufffd\021\ufffd\023\ufffd\025\ufffd\041\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002\000\004\012" +
    "\u0168\001\002\000\004\012\u014a\001\002\000\024\003\uffd4" +
    "\021\uffd4\023\uffd4\025\uffd4\041\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\001\002\000\004\006\u0121\001\002\000\004" +
    "\006\344\001\002\000\024\003\ufffe\021\ufffe\023\ufffe\025" +
    "\ufffe\041\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002" +
    "\000\004\006\237\001\002\000\004\012\201\001\002\000" +
    "\024\003\ufffb\021\ufffb\023\ufffb\025\ufffb\041\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\001\002\000\024\003\ufffc\021" +
    "\ufffc\023\ufffc\025\ufffc\041\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\001\002\000\006\005\177\007\200\001\002\000" +
    "\024\003\ufffa\021\ufffa\023\ufffa\025\ufffa\041\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\001\002\000\004\006\033\001" +
    "\002\000\024\003\uffd3\021\uffd3\023\uffd3\025\uffd3\041\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000\024\003" +
    "\022\021\031\023\017\025\010\041\011\054\024\055\014" +
    "\056\013\057\016\001\002\000\024\003\ufff9\021\ufff9\023" +
    "\ufff9\025\ufff9\041\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\001\002\000\024\003\uffff\021\uffff\023\uffff\025\uffff\041" +
    "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\001\002\000\004" +
    "\020\032\001\002\000\004\002\000\001\002\000\010\003" +
    "\035\045\037\046\036\001\002\000\012\003\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\001\002\000\004\005\176\001\002\000" +
    "\004\012\163\001\002\000\004\012\051\001\002\000\012" +
    "\003\035\044\042\045\037\046\036\001\002\000\012\003" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\001\002\000\004\054\043" +
    "\001\002\000\004\021\044\001\002\000\004\005\045\001" +
    "\002\000\004\007\046\001\002\000\004\021\047\001\002" +
    "\000\004\005\050\001\002\000\024\003\uffc4\021\uffc4\023" +
    "\uffc4\025\uffc4\041\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4" +
    "\001\002\000\004\012\052\001\002\000\004\024\053\001" +
    "\002\000\004\004\054\001\002\000\006\014\056\017\055" +
    "\001\002\000\004\063\162\001\002\000\036\026\103\027" +
    "\100\030\076\031\070\032\077\033\064\034\066\035\072" +
    "\036\062\037\074\040\073\060\101\062\063\063\071\001" +
    "\002\000\004\021\060\001\002\000\004\005\061\001\002" +
    "\000\012\003\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002\000" +
    "\004\006\157\001\002\000\010\007\uffe8\013\uffe8\015\uffe8" +
    "\001\002\000\004\006\154\001\002\000\006\013\152\015" +
    "\uffec\001\002\000\004\006\147\001\002\000\010\007\uffe9" +
    "\013\uffe9\015\uffe9\001\002\000\004\006\142\001\002\000" +
    "\010\007\uffe6\013\uffe6\015\uffe6\001\002\000\004\006\137" +
    "\001\002\000\004\006\134\001\002\000\004\006\131\001" +
    "\002\000\010\007\uffea\013\uffea\015\uffea\001\002\000\004" +
    "\006\124\001\002\000\004\006\117\001\002\000\004\006" +
    "\112\001\002\000\010\007\uffe7\013\uffe7\015\uffe7\001\002" +
    "\000\004\015\111\001\002\000\004\006\104\001\002\000" +
    "\036\026\103\027\100\030\076\031\070\032\077\033\064" +
    "\034\066\035\072\036\062\037\074\040\073\060\101\062" +
    "\063\063\071\001\002\000\004\013\106\001\002\000\036" +
    "\026\103\027\100\030\076\031\070\032\077\033\064\034" +
    "\066\035\072\036\062\037\074\040\073\060\101\062\063" +
    "\063\071\001\002\000\004\007\110\001\002\000\012\007" +
    "\uffe1\013\uffe1\015\uffe1\021\uffe1\001\002\000\006\007\uffd5" +
    "\021\uffd5\001\002\000\036\026\103\027\100\030\076\031" +
    "\070\032\077\033\064\034\066\035\072\036\062\037\074" +
    "\040\073\060\101\062\063\063\071\001\002\000\004\013" +
    "\114\001\002\000\036\026\103\027\100\030\076\031\070" +
    "\032\077\033\064\034\066\035\072\036\062\037\074\040" +
    "\073\060\101\062\063\063\071\001\002\000\004\007\116" +
    "\001\002\000\012\007\uffe0\013\uffe0\015\uffe0\021\uffe0\001" +
    "\002\000\036\026\103\027\100\030\076\031\070\032\077" +
    "\033\064\034\066\035\072\036\062\037\074\040\073\060" +
    "\101\062\063\063\071\001\002\000\004\013\121\001\002" +
    "\000\036\026\103\027\100\030\076\031\070\032\077\033" +
    "\064\034\066\035\072\036\062\037\074\040\073\060\101" +
    "\062\063\063\071\001\002\000\004\007\123\001\002\000" +
    "\012\007\uffdd\013\uffdd\015\uffdd\021\uffdd\001\002\000\036" +
    "\026\103\027\100\030\076\031\070\032\077\033\064\034" +
    "\066\035\072\036\062\037\074\040\073\060\101\062\063" +
    "\063\071\001\002\000\004\013\126\001\002\000\036\026" +
    "\103\027\100\030\076\031\070\032\077\033\064\034\066" +
    "\035\072\036\062\037\074\040\073\060\101\062\063\063" +
    "\071\001\002\000\004\007\130\001\002\000\012\007\uffdf" +
    "\013\uffdf\015\uffdf\021\uffdf\001\002\000\006\014\056\017" +
    "\055\001\002\000\004\007\133\001\002\000\012\007\uffd8" +
    "\013\uffd8\015\uffd8\021\uffd8\001\002\000\006\014\056\017" +
    "\055\001\002\000\004\007\136\001\002\000\012\007\uffd7" +
    "\013\uffd7\015\uffd7\021\uffd7\001\002\000\006\014\056\017" +
    "\055\001\002\000\004\007\141\001\002\000\012\007\uffda" +
    "\013\uffda\015\uffda\021\uffda\001\002\000\036\026\103\027" +
    "\100\030\076\031\070\032\077\033\064\034\066\035\072" +
    "\036\062\037\074\040\073\060\101\062\063\063\071\001" +
    "\002\000\004\013\144\001\002\000\036\026\103\027\100" +
    "\030\076\031\070\032\077\033\064\034\066\035\072\036" +
    "\062\037\074\040\073\060\101\062\063\063\071\001\002" +
    "\000\004\007\146\001\002\000\012\007\uffde\013\uffde\015" +
    "\uffde\021\uffde\001\002\000\006\014\056\017\055\001\002" +
    "\000\004\007\151\001\002\000\012\007\uffdb\013\uffdb\015" +
    "\uffdb\021\uffdb\001\002\000\036\026\103\027\100\030\076" +
    "\031\070\032\077\033\064\034\066\035\072\036\062\037" +
    "\074\040\073\060\101\062\063\063\071\001\002\000\004" +
    "\015\uffeb\001\002\000\006\014\056\017\055\001\002\000" +
    "\004\007\156\001\002\000\012\007\uffdc\013\uffdc\015\uffdc" +
    "\021\uffdc\001\002\000\006\014\056\017\055\001\002\000" +
    "\004\007\161\001\002\000\012\007\uffd9\013\uffd9\015\uffd9" +
    "\021\uffd9\001\002\000\006\007\uffd6\021\uffd6\001\002\000" +
    "\004\012\164\001\002\000\004\022\165\001\002\000\004" +
    "\014\166\001\002\000\004\015\167\001\002\000\004\004" +
    "\170\001\002\000\006\061\173\063\171\001\002\000\012" +
    "\013\ufff1\015\ufff1\016\ufff1\021\ufff1\001\002\000\004\021" +
    "\174\001\002\000\012\013\ufff2\015\ufff2\016\ufff2\021\ufff2" +
    "\001\002\000\004\005\175\001\002\000\012\003\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\001\002\000\012\003\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\001\002\000\024\003\ufff8\021\ufff8\023" +
    "\ufff8\025\ufff8\041\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\001\002\000\024\003\uffc3\021\uffc3\023\uffc3\025\uffc3\041" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002\000\006" +
    "\022\202\024\203\001\002\000\004\014\225\001\002\000" +
    "\004\012\204\001\002\000\004\012\205\001\002\000\004" +
    "\063\206\001\002\000\004\011\207\001\002\000\004\016" +
    "\210\001\002\000\036\026\103\027\100\030\076\031\070" +
    "\032\077\033\064\034\066\035\072\036\062\037\074\040" +
    "\073\060\211\062\216\063\213\001\002\000\004\021\ufff4" +
    "\001\002\000\004\021\223\001\002\000\004\021\ufff3\001" +
    "\002\000\004\021\221\001\002\000\004\021\217\001\002" +
    "\000\004\021\ufff5\001\002\000\004\005\220\001\002\000" +
    "\024\003\uffe2\021\uffe2\023\uffe2\025\uffe2\041\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\001\002\000\004\005\222\001" +
    "\002\000\024\003\uffe3\021\uffe3\023\uffe3\025\uffe3\041\uffe3" +
    "\054\uffe3\055\uffe3\056\uffe3\057\uffe3\001\002\000\004\005" +
    "\224\001\002\000\024\003\ufff7\021\ufff7\023\ufff7\025\ufff7" +
    "\041\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000" +
    "\004\015\226\001\002\000\004\012\227\001\002\000\004" +
    "\012\230\001\002\000\004\063\231\001\002\000\004\011" +
    "\232\001\002\000\004\016\233\001\002\000\006\061\173" +
    "\063\171\001\002\000\004\021\235\001\002\000\004\005" +
    "\236\001\002\000\024\003\ufff6\021\ufff6\023\ufff6\025\ufff6" +
    "\041\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\001\002\000" +
    "\016\003\242\046\244\050\243\051\241\052\247\053\245" +
    "\001\002\000\020\003\uffc1\044\uffc1\046\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\001\002\000\004\012\335\001\002" +
    "\000\004\005\334\001\002\000\004\012\313\001\002\000" +
    "\004\012\302\001\002\000\004\012\271\001\002\000\020" +
    "\003\242\044\262\046\244\050\243\051\241\052\247\053" +
    "\245\001\002\000\004\012\250\001\002\000\004\012\251" +
    "\001\002\000\004\022\252\001\002\000\004\014\253\001" +
    "\002\000\004\015\254\001\002\000\004\004\255\001\002" +
    "\000\006\061\173\063\171\001\002\000\004\021\257\001" +
    "\002\000\004\005\260\001\002\000\020\003\uffbd\044\uffbd" +
    "\046\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\001\002\000" +
    "\020\003\uffc2\044\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\001\002\000\004\057\263\001\002\000\004\021" +
    "\264\001\002\000\004\005\265\001\002\000\004\007\266" +
    "\001\002\000\004\021\267\001\002\000\004\005\270\001" +
    "\002\000\024\003\uffc7\021\uffc7\023\uffc7\025\uffc7\041\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000\004\012" +
    "\272\001\002\000\004\022\273\001\002\000\004\014\274" +
    "\001\002\000\004\015\275\001\002\000\004\004\276\001" +
    "\002\000\006\061\173\063\171\001\002\000\004\021\300" +
    "\001\002\000\004\005\301\001\002\000\020\003\uffbc\044" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\001\002" +
    "\000\004\012\303\001\002\000\004\022\304\001\002\000" +
    "\004\014\305\001\002\000\004\015\306\001\002\000\004" +
    "\004\307\001\002\000\006\061\173\063\171\001\002\000" +
    "\004\021\311\001\002\000\004\005\312\001\002\000\020" +
    "\003\uffc0\044\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\001\002\000\004\012\314\001\002\000\004\022\315" +
    "\001\002\000\004\014\316\001\002\000\004\015\317\001" +
    "\002\000\004\004\320\001\002\000\006\014\323\017\322" +
    "\001\002\000\004\021\332\001\002\000\004\063\331\001" +
    "\002\000\006\061\173\063\171\001\002\000\006\013\327" +
    "\015\uffe5\001\002\000\004\015\326\001\002\000\004\021" +
    "\uffb9\001\002\000\006\061\173\063\171\001\002\000\004" +
    "\015\uffe4\001\002\000\004\021\uffba\001\002\000\004\005" +
    "\333\001\002\000\020\003\uffbf\044\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\001\002\000\020\003\uffbb\044" +
    "\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002" +
    "\000\004\012\336\001\002\000\004\024\337\001\002\000" +
    "\004\004\340\001\002\000\006\014\056\017\055\001\002" +
    "\000\004\021\342\001\002\000\004\005\343\001\002\000" +
    "\020\003\uffbe\044\uffbe\046\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\001\002\000\016\003\347\046\350\050\346\051" +
    "\345\052\354\053\352\001\002\000\004\012\u011a\001\002" +
    "\000\004\012\u0111\001\002\000\004\005\u0110\001\002\000" +
    "\004\012\u0107\001\002\000\020\003\347\044\377\046\350" +
    "\050\346\051\345\052\354\053\352\001\002\000\004\012" +
    "\366\001\002\000\020\003\uffb1\044\uffb1\046\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\001\002\000\004\012\355\001" +
    "\002\000\004\012\356\001\002\000\004\022\357\001\002" +
    "\000\004\014\360\001\002\000\004\015\361\001\002\000" +
    "\004\004\362\001\002\000\006\061\173\063\171\001\002" +
    "\000\004\021\364\001\002\000\004\005\365\001\002\000" +
    "\020\003\uffad\044\uffad\046\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\001\002\000\004\012\367\001\002\000\004\022" +
    "\370\001\002\000\004\014\371\001\002\000\004\015\372" +
    "\001\002\000\004\004\373\001\002\000\006\061\173\063" +
    "\171\001\002\000\004\021\375\001\002\000\004\005\376" +
    "\001\002\000\020\003\uffac\044\uffac\046\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\001\002\000\004\055\u0101\001\002" +
    "\000\020\003\uffb2\044\uffb2\046\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\001\002\000\004\021\u0102\001\002\000\004" +
    "\005\u0103\001\002\000\004\007\u0104\001\002\000\004\021" +
    "\u0105\001\002\000\004\005\u0106\001\002\000\024\003\uffc5" +
    "\021\uffc5\023\uffc5\025\uffc5\041\uffc5\054\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\001\002\000\004\012\u0108\001\002\000\004" +
    "\022\u0109\001\002\000\004\014\u010a\001\002\000\004\015" +
    "\u010b\001\002\000\004\004\u010c\001\002\000\006\061\173" +
    "\063\171\001\002\000\004\021\u010e\001\002\000\004\005" +
    "\u010f\001\002\000\020\003\uffb0\044\uffb0\046\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\001\002\000\020\003\uffab\044" +
    "\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab\001\002" +
    "\000\004\012\u0112\001\002\000\004\022\u0113\001\002\000" +
    "\004\014\u0114\001\002\000\004\015\u0115\001\002\000\004" +
    "\004\u0116\001\002\000\006\014\323\017\322\001\002\000" +
    "\004\021\u0118\001\002\000\004\005\u0119\001\002\000\020" +
    "\003\uffaf\044\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\001\002\000\004\012\u011b\001\002\000\004\024\u011c" +
    "\001\002\000\004\004\u011d\001\002\000\006\014\056\017" +
    "\055\001\002\000\004\021\u011f\001\002\000\004\005\u0120" +
    "\001\002\000\020\003\uffae\044\uffae\046\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\001\002\000\012\003\u0122\045\u0125" +
    "\046\u0124\047\u0127\001\002\000\004\005\u0149\001\002\000" +
    "\014\003\u0122\044\u0141\045\u0125\046\u0124\047\u0127\001\002" +
    "\000\004\012\u0138\001\002\000\004\012\u0131\001\002\000" +
    "\014\003\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\001\002" +
    "\000\004\012\u0128\001\002\000\004\012\u0129\001\002\000" +
    "\004\022\u012a\001\002\000\004\014\u012b\001\002\000\004" +
    "\015\u012c\001\002\000\004\004\u012d\001\002\000\006\014" +
    "\323\017\322\001\002\000\004\021\u012f\001\002\000\004" +
    "\005\u0130\001\002\000\014\003\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\001\002\000\004\012\u0132\001\002\000\004" +
    "\024\u0133\001\002\000\004\004\u0134\001\002\000\006\014" +
    "\056\017\055\001\002\000\004\021\u0136\001\002\000\004" +
    "\005\u0137\001\002\000\014\003\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\001\002\000\004\012\u0139\001\002\000\004" +
    "\022\u013a\001\002\000\004\014\u013b\001\002\000\004\015" +
    "\u013c\001\002\000\004\004\u013d\001\002\000\006\061\173" +
    "\063\171\001\002\000\004\021\u013f\001\002\000\004\005" +
    "\u0140\001\002\000\014\003\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\001\002\000\004\056\u0143\001\002\000\014\003" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002\000\004" +
    "\021\u0144\001\002\000\004\005\u0145\001\002\000\004\007" +
    "\u0146\001\002\000\004\021\u0147\001\002\000\004\005\u0148" +
    "\001\002\000\024\003\uffc6\021\uffc6\023\uffc6\025\uffc6\041" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\014" +
    "\003\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\001\002\000" +
    "\004\012\u014b\001\002\000\006\042\u014c\043\u014d\001\002" +
    "\000\004\004\u0164\001\002\000\004\004\u014e\001\002\000" +
    "\006\061\173\063\171\001\002\000\004\016\u0150\001\002" +
    "\000\004\010\u0151\001\002\000\006\014\u0153\017\u0152\001" +
    "\002\000\004\063\u0161\001\002\000\040\026\103\027\100" +
    "\030\076\031\070\032\077\033\064\034\066\035\072\036" +
    "\062\037\074\040\073\060\u015b\061\u0155\062\u0154\063\u0158" +
    "\001\002\000\010\013\uffcc\015\uffcc\021\uffcc\001\002\000" +
    "\010\013\uffcf\015\uffcf\021\uffcf\001\002\000\004\015\u015e" +
    "\001\002\000\010\013\uffcd\015\uffcd\021\uffcd\001\002\000" +
    "\010\013\uffca\015\uffca\021\uffca\001\002\000\010\013\uffce" +
    "\015\uffce\021\uffce\001\002\000\010\013\u015c\015\uffd1\021" +
    "\uffd1\001\002\000\010\013\uffcb\015\uffcb\021\uffcb\001\002" +
    "\000\040\026\103\027\100\030\076\031\070\032\077\033" +
    "\064\034\066\035\072\036\062\037\074\040\073\060\u015b" +
    "\061\u0155\062\u0154\063\u0158\001\002\000\006\015\uffd0\021" +
    "\uffd0\001\002\000\004\021\u015f\001\002\000\004\005\u0160" +
    "\001\002\000\024\003\uffc8\021\uffc8\023\uffc8\025\uffc8\041" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\001\002\000\004" +
    "\021\u0162\001\002\000\004\005\u0163\001\002\000\024\003" +
    "\uffc9\021\uffc9\023\uffc9\025\uffc9\041\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\001\002\000\040\026\103\027\100\030" +
    "\076\031\070\032\077\033\064\034\066\035\072\036\062" +
    "\037\074\040\073\060\u015b\061\u0155\062\u0154\063\u0158\001" +
    "\002\000\004\021\u0166\001\002\000\004\005\u0167\001\002" +
    "\000\024\003\uffd2\021\uffd2\023\uffd2\025\uffd2\041\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002\000\006\022\u0169" +
    "\024\u016a\001\002\000\004\014\u017a\001\002\000\004\012" +
    "\u016b\001\002\000\004\012\u016c\001\002\000\004\017\u016d" +
    "\001\002\000\004\063\u016e\001\002\000\004\011\u016f\001" +
    "\002\000\004\016\u0170\001\002\000\006\014\u0172\017\u0171" +
    "\001\002\000\004\063\u0177\001\002\000\036\026\103\027" +
    "\100\030\076\031\070\032\077\033\064\034\066\035\072" +
    "\036\062\037\074\040\073\060\101\062\063\063\071\001" +
    "\002\000\004\015\u0174\001\002\000\004\021\u0175\001\002" +
    "\000\004\005\u0176\001\002\000\024\003\ufff0\021\ufff0\023" +
    "\ufff0\025\ufff0\041\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\001\002\000\004\021\u0178\001\002\000\004\005\u0179\001" +
    "\002\000\024\003\uffee\021\uffee\023\uffee\025\uffee\041\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\001\002\000\004\015" +
    "\u017b\001\002\000\004\012\u017c\001\002\000\004\012\u017d" +
    "\001\002\000\004\017\u017e\001\002\000\004\063\u017f\001" +
    "\002\000\004\011\u0180\001\002\000\004\016\u0181\001\002" +
    "\000\006\014\u0183\017\u0182\001\002\000\004\063\u0188\001" +
    "\002\000\006\061\173\063\171\001\002\000\004\015\u0185" +
    "\001\002\000\004\021\u0186\001\002\000\004\005\u0187\001" +
    "\002\000\024\003\uffef\021\uffef\023\uffef\025\uffef\041\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\001\002\000\004\021" +
    "\u0189\001\002\000\004\005\u018a\001\002\000\024\003\uffed" +
    "\021\uffed\023\uffed\025\uffed\041\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0188\000\004\002\004\001\001\000\024\003\025\004" +
    "\014\005\020\010\017\014\022\016\026\017\011\020\024" +
    "\025\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\027\005\020" +
    "\010\017\014\022\016\026\017\011\020\024\025\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\037\035\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\056\001\001\000\002\001\001\000\012\011" +
    "\101\013\064\015\074\023\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\104\015\074\023\066\001\001\000" +
    "\002\001\001\000\010\013\106\015\074\023\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\112\015\074\023\066\001\001\000\002\001\001" +
    "\000\010\013\114\015\074\023\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\117\015\074\023\066" +
    "\001\001\000\002\001\001\000\010\013\121\015\074\023" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\124\015\074\023\066\001\001\000\002\001\001\000" +
    "\010\013\126\015\074\023\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\142\015\074" +
    "\023\066\001\001\000\002\001\001\000\010\013\144\015" +
    "\074\023\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\152\013\064\015\074\023\066\001\001" +
    "\000\002\001\001\000\004\024\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\211\015\213\023\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\245\032\237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\323\012\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\323" +
    "\012\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\350\034\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\373\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u0116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u011d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u0122\033\u0125\001\001\000\002\001" +
    "\001\000\004\033\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u012d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\u013d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\u0158\021" +
    "\u0155\022\u0159\023\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\u0158\021\u015c\022\u0159\023\u0156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\u0158\021\u0164\022\u0159\023\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\u0172\013\064\015\074\023\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\323\012\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            funcionalidad.Funcion.addErroresLista("Sintactico",(String) s.value, s.right, s.left );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
           System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
           funcionalidad.Funcion.addErroresLista( "Sintactico",(String) s.value, s.right, s.left );
           JOptionPane.showMessageDialog(null, "Error sintactico: No se pudo recuperar. Por favor corregir el error", (String) s.value, JOptionPane.ERROR_MESSAGE);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= R_PROGRAM codigo R_END R_PROGRAM 
            {
              Object RESULT =null;
		 funcionalidad.Funcion.obtenerLImpresion();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= codigo instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= funcgrafic 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= operaciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO numero R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int pos1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String pos1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int nomvariableleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nomvariableright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nomvariable = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valorrecibidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valorrecibidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object valorrecibido = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable.toLowerCase(), valorrecibido, "variable double", pos1right,  pos1left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= R_VAR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int pos2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String pos2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nomvariable1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nomvariable1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nomvariable1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int datorecibidoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int datorecibidoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object datorecibido = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addHMSimbolos("decVariables", nomvariable1.toLowerCase(), datorecibido, "variable string", pos2right,  pos2left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numero ::= DECIMALES 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numero ::= ENTERO 
            {
              Object RESULT =null;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Integer.valueOf(v2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numero ::= ID 
            {
              Object RESULT =null;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 double valorc = 0; String respuesta = funcionalidad.Funcion.buscarValordId("decVariables",v3.toLowerCase()).toString(); if(respuesta.equals("Valor no encontrado")){valorc = 0;}else{ valorc = Double.parseDouble(respuesta);}RESULT = valorc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numero",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cadena ::= CADENA 
            {
              Object RESULT =null;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v4.replace("\"",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadena",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cadena ::= ID 
            {
              Object RESULT =null;
		int v5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v5.toLowerCase()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadena",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arreglos ::= R_ARR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO CORCHETE_A valoresnumeros CORCHETE_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int pos3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String pos3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int nombrevariable2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nombrevariable2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String nombrevariable2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valorrecibido1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valorrecibido1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object valorrecibido1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable2),(LinkedList<Object>)valorrecibido1, "arreglo double", pos3right,  pos3left);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arreglos ::= R_ARR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO CORCHETE_A valorescadenas CORCHETE_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int pos4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		String pos4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int nombrevariable3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nombrevariable3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String nombrevariable3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int datorecibido1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int datorecibido1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object datorecibido1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable3),(LinkedList<Object>) datorecibido1, "arreglo string", pos4right,  pos4left);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arreglos ::= R_ARR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO ARROBA ID R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int pos5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String pos5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int nombrevariable4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nombrevariable4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String nombrevariable4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable4),(LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(v6.toLowerCase())),"arreglo double", pos5right,  pos5left ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arreglos ::= R_ARR DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C DOSPUNTOS DOSPUNTOS ARROBA ID MENOR GUION_MEDIO ARROBA ID R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).left;
		int pos6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)).right;
		String pos6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-14)).value;
		int nombrevariable5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nombrevariable5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String nombrevariable5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String v7 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addHMSimbolosA("decArreglos", "@"+ String.valueOf(nombrevariable5),(LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(v7.toLowerCase())),"arreglo string", pos6right,  pos6left ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valoresnumeros ::= listanum 
            {
              Object RESULT =null;
		int vn1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vn1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vn1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Object> advnumeros = new LinkedList<Object>(); advnumeros.add(vn1); RESULT = (LinkedList<Object>) advnumeros;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresnumeros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valoresnumeros ::= listanum COMA valoresnumeros 
            {
              Object RESULT =null;
		int vn2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vn2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vn2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vn3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vn3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vn3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Object> advnumeros1 = new LinkedList<Object>(); advnumeros1.add(vn2); advnumeros1.addAll((LinkedList)vn3); RESULT = (LinkedList<Object>) advnumeros1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresnumeros",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listanum ::= funcionesop 
            {
              Object RESULT =null;
		int resultfunopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultfunopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resultfunop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(resultfunop.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listanum ::= funcionesest 
            {
              Object RESULT =null;
		int resultfunestleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultfunestright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resultfunest = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(resultfunest.toString()) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listanum ::= DECIMALES 
            {
              Object RESULT =null;
		int v8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v8 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(v8); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listanum ::= ENTERO 
            {
              Object RESULT =null;
		int v9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v9 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Integer.valueOf(v9); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listanum ::= ID 
            {
              Object RESULT =null;
		int v10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v10 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 double valorc = 0; String respuesta = funcionalidad.Funcion.buscarValordId("decVariables",v10.toLowerCase()).toString(); if(respuesta.equals("Valor no encontrado")){valorc = 0;}else{ valorc = Double.parseDouble(respuesta);}RESULT = valorc; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listanum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valorescadenas ::= cadena 
            {
              Object RESULT =null;
		int vn4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vn4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vn4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Object> advnumeros2 = new LinkedList<Object>(); advnumeros2.add(vn4);  RESULT = (LinkedList<Object>) advnumeros2;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorescadenas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valorescadenas ::= cadena COMA valorescadenas 
            {
              Object RESULT =null;
		int vn5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vn5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vn5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vn6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vn6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vn6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Object> advnumeros3 = new LinkedList<Object>(); advnumeros3.add(vn5); advnumeros3.addAll((LinkedList)vn6); RESULT = (LinkedList<Object>) advnumeros3; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorescadenas",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operaciones ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesop R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int pos7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String pos7 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int nombrevariable6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombrevariable6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombrevariable6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rf1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rf1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rf1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addHMSimbolos("decVariables", nombrevariable6.toLowerCase(), rf1, "variable double", pos7right,  pos7left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones ::= R_VAR DOSPUNTOS R_DOUBLE DOSPUNTOS DOSPUNTOS ID MENOR GUION_MEDIO funcionesest R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int pos8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int pos8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String pos8 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int nombrevariable7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombrevariable7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String nombrevariable7 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rf2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rf2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object rf2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addHMSimbolos("decVariables", nombrevariable7.toLowerCase(), rf2, "variable double", pos8right,  pos8left); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operaciones",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcionesop ::= R_SUM PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Suma(Double.parseDouble(pa.toString()),Double.parseDouble(pb.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcionesop ::= R_RES PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;
		int pa1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pa1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pa1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pb1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pb1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pb1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Resta(Double.parseDouble(pa1.toString()),Double.parseDouble(pb1.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcionesop ::= R_MUL PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;
		int pa2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pa2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pa2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pb2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pb2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pb2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Multiplicacion(Double.parseDouble(pa2.toString()),Double.parseDouble(pb2.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcionesop ::= R_DIV PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;
		int pa3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pa3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pa3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pb3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pb3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pb3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Division(Double.parseDouble(pa3.toString()),Double.parseDouble(pb3.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcionesop ::= R_MOD PARENTESIS_A listanum COMA listanum PARENTESIS_C 
            {
              Object RESULT =null;
		int pa4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pa4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pa4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pb4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pb4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pb4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Modulo(Double.parseDouble(pa4.toString()),Double.parseDouble(pb4.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesop",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcionesest ::= R_MEDIA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Media((LinkedList<Object>) ar1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcionesest ::= R_MEDIANA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;
		int ar2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Mediana((LinkedList<Object>) ar2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcionesest ::= R_MODA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;
		int ar3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ar3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Moda((LinkedList<Object>) ar3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcionesest ::= R_VARIANZA PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;
		int ar4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ar4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Varianza((LinkedList<Object>) ar4); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcionesest ::= R_MAX PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;
		int ar5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ar5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Max((LinkedList<Object>) ar5); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcionesest ::= R_MIN PARENTESIS_A arreglodouble PARENTESIS_C 
            {
              Object RESULT =null;
		int ar6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ar6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ar6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funcionalidad.Operacion.Min((LinkedList<Object>) ar6); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesest",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arreglodouble ::= ARROBA ID 
            {
              Object RESULT =null;
		int vbuscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vbuscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vbusc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(vbusc.toLowerCase())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglodouble",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arreglodouble ::= CORCHETE_A valoresnumeros CORCHETE_C 
            {
              Object RESULT =null;
		int arrobtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arrobt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (LinkedList<Object>) arrobt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglodouble",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // impresiones ::= imprimirexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // impresiones ::= imprimirarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impresiones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // imprimirexpresiones ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_PRINT IGUAL listaexpresiones R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Funcion.addImpresiones((LinkedList<Object>) lexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirexpresiones",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaexpresiones ::= expresioness 
            {
              Object RESULT =null;
		int vn7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vn7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vn7 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Object> advnumeros4 = new LinkedList<Object>(); advnumeros4.add(vn7);  RESULT = (LinkedList<Object>) advnumeros4;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaexpresiones ::= expresioness COMA listaexpresiones 
            {
              Object RESULT =null;
		int vn8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vn8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vn8 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vn9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vn9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vn9 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Object> advnumeros5 = new LinkedList<Object>(); advnumeros5.add(vn8); advnumeros5.addAll((LinkedList)vn9); RESULT = (LinkedList<Object>) advnumeros5; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaexpresiones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresioness ::= CADENA 
            {
              Object RESULT =null;
		int datitoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int datitoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String datito = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = datito.replace("\"",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioness",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresioness ::= funcionesop 
            {
              Object RESULT =null;
		int resultfunop1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultfunop1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resultfunop1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(resultfunop1.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioness",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresioness ::= funcionesest 
            {
              Object RESULT =null;
		int resultfunest1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int resultfunest1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object resultfunest1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(resultfunest1.toString()) ; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioness",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresioness ::= DECIMALES 
            {
              Object RESULT =null;
		int v11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v11 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Double.parseDouble(v11); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioness",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresioness ::= ENTERO 
            {
              Object RESULT =null;
		int v12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v12 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Integer.valueOf(v12); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioness",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresioness ::= ID 
            {
              Object RESULT =null;
		int v13left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v13right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v13 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcionalidad.Funcion.buscarValordId("decVariables",v13.toLowerCase()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresioness",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // imprimirarreglos ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena GUION_MEDIO MAYOR ARROBA ID R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int titimpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int titimpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object titimp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String bid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funcionalidad.Funcion.addImpresionesCol(titimp.toString(), (LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(bid.toLowerCase()))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirarreglos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // imprimirarreglos ::= R_CONSOLE DOSPUNTOS DOSPUNTOS R_COLUMN IGUAL cadena GUION_MEDIO MAYOR CORCHETE_A listaexpresiones CORCHETE_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int titimp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int titimp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object titimp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int drecibleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int drecibright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object drecib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		funcionalidad.Funcion.addImpresionesCol(titimp1.toString(), (LinkedList<Object>) drecib);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("imprimirarreglos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funcgrafic ::= R_GBAR PARENTESIS_A sentenciasgbar R_EXEC R_GBAR R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ejectleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int ejectright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String eject = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 if(eject.toString().toLowerCase().equals("exec")){ funcionalidad.Grafica.barras();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcgrafic",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funcgrafic ::= R_GPIE PARENTESIS_A sentenciasgpie R_EXEC R_GPIE R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int eject1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eject1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String eject1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 if(eject1.toString().toLowerCase().equals("exec")){ funcionalidad.Grafica.gPie(); }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcgrafic",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcgrafic ::= R_GLINE PARENTESIS_A sentenciasgline R_EXEC R_GLINE R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int eject2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eject2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String eject2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 if(eject2.toString().toLowerCase().equals("exec")){ funcionalidad.Grafica.gLine();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcgrafic",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcgrafic ::= R_HISTOGRAM PARENTESIS_A sentenciashistogram R_EXEC R_HISTOGRAM R_END PUNTOYCOMA PARENTESIS_C R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int eject3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eject3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String eject3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 if(eject3.toString().toLowerCase().equals("exec")){ funcionalidad.Grafica.gHisto();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcgrafic",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcgrafic ::= error PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcgrafic",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciasgbar ::= sentenciasgbar sentencgbar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasgbar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciasgbar ::= sentencgbar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasgbar",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencgbar ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tttlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tttlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tttl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloBarras = tttl.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgbar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencgbar ::= R_EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arregloccc R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int vbaaaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vbaaaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vbaaa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarExb((LinkedList<Object>) vbaaa); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgbar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencgbar ::= R_EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL arreglodouble R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int vbaaa1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vbaaa1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object vbaaa1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarEyb((LinkedList<Object>) vbaaa1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgbar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencgbar ::= R_TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tttlxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tttlxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tttlx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloxBarras = tttlx.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgbar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencgbar ::= R_TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tttlyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tttlyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tttly = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloyBarras = tttly.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgbar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencgbar ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgbar",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arregloccc ::= ARROBA ID 
            {
              Object RESULT =null;
		int vbuscleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vbuscright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vbusc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (LinkedList<Object>) funcionalidad.Funcion.buscarValordIdArr("decArreglos", "@"+ String.valueOf(vbusc.toLowerCase())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloccc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // arregloccc ::= CORCHETE_A valorescadenas CORCHETE_C 
            {
              Object RESULT =null;
		int arrobtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arrobt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (LinkedList<Object>) arrobt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloccc",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentenciasgpie ::= sentenciasgpie sentencgpie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasgpie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentenciasgpie ::= sentencgpie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasgpie",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencgpie ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ttt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ttt2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloPie = ttt2.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgpie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencgpie ::= R_VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL arreglodouble R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lvapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lvap = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarvalPie((LinkedList<Object>) lvap); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgpie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencgpie ::= R_LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arregloccc R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int llapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int llapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object llap = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarLaPie((LinkedList<Object>) llap); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgpie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencgpie ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgpie",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciasgline ::= sentenciasgline sentencgline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasgline",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciasgline ::= sentencgline 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasgline",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencgline ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ttt3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttt3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ttt3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloLine = ttt3.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgline",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencgline ::= R_EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL arregloccc R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lalineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lalineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object laline = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarExL((LinkedList<Object>) laline); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgline",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencgline ::= R_EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL arreglodouble R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int laline1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int laline1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object laline1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarEyL((LinkedList<Object>) laline1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgline",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencgline ::= R_TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ttt4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttt4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ttt4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloxLine = ttt4.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgline",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencgline ::= R_TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ttt5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttt5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ttt5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloyLine = ttt5.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgline",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencgline ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencgline",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentenciashistogram ::= sentenciashistogram sentenchistogram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciashistogram",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentenciashistogram ::= sentenchistogram 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciashistogram",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentenchistogram ::= R_TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_A CORCHETE_C IGUAL cadena R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ttt6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ttt6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ttt6 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.tituloHisto = ttt6.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenchistogram",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentenchistogram ::= R_VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL arreglodouble R_END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lahistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lahistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lahist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 funcionalidad.Grafica.igualarvalHist((LinkedList<Object>) lahist); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenchistogram",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentenchistogram ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenchistogram",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
